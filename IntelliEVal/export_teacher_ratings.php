<?php
// Prevent any output before Excel headers
ob_start();

session_start();
require_once '../config/database.php';
require_once '../includes/functions.php';

// Include PhpSpreadsheet library
require_once '../vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Font;
use PhpOffice\PhpSpreadsheet\Style\Color;

try {
    // Check if user is logged in and has guidance_officer role
    if (!isset($_SESSION['user_id']) || $_SESSION['role'] !== 'guidance_officer') {
        header('Location: ../login.php');
        exit();
    }

    // Get parameters
    $selected_semester = isset($_GET['semester']) ? (int)$_GET['semester'] : 0;
    $selected_year = isset($_GET['year']) ? $_GET['year'] : date('Y');

    // Create new Spreadsheet object
    $spreadsheet = new Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();

    // Set page setup for Legal size paper (8.5" x 13")
    $sheet->getPageSetup()->setPaperSize(\PhpOffice\PhpSpreadsheet\Worksheet\PageSetup::PAPERSIZE_LEGAL);
    $sheet->getPageSetup()->setOrientation(\PhpOffice\PhpSpreadsheet\Worksheet\PageSetup::ORIENTATION_PORTRAIT);
    $sheet->getPageSetup()->setFitToWidth(1);
    $sheet->getPageSetup()->setFitToHeight(0); // Auto-fit height
    $sheet->getPageSetup()->setHorizontalCentered(true);
    $sheet->getPageSetup()->setVerticalCentered(false);

    // Set margins (in inches)
    $sheet->getPageMargins()->setTop(0.75);
    $sheet->getPageMargins()->setRight(0.75);
    $sheet->getPageMargins()->setBottom(0.75);
    $sheet->getPageMargins()->setLeft(0.75);
    $sheet->getPageMargins()->setHeader(0.5);
    $sheet->getPageMargins()->setFooter(0.5);

    // Function to get semester name
    function getSemesterName($conn, $semester_id) {
        if ($semester_id > 0) {
            $query = "SELECT name, academic_year FROM semesters WHERE id = ?";
            $stmt = mysqli_prepare($conn, $query);
            mysqli_stmt_bind_param($stmt, "i", $semester_id);
            mysqli_stmt_execute($stmt);
            $result = mysqli_stmt_get_result($stmt);
            $semester = mysqli_fetch_assoc($result);
            return $semester ? $semester['name'] . ' (' . $semester['academic_year'] . ')' : 'All Semesters';
        }
        return 'All Semesters';
    }

    // Function to apply header styling
    function applyHeaderStyle($sheet, $row, $colCount) {
        $sheet->getStyle("A{$row}:{$sheet->getHighestColumn()}{$row}")->applyFromArray([
            'font' => [
                'bold' => true,
                'color' => ['rgb' => 'FFFFFF'],
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '4472C4'],
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER,
            ],
        ]);
    }

    // Function to apply data styling
    function applyDataStyle($sheet, $startRow, $endRow, $colCount) {
        $sheet->getStyle("A{$startRow}:{$sheet->getHighestColumn()}{$endRow}")->applyFromArray([
            'alignment' => [
                'vertical' => Alignment::VERTICAL_CENTER,
            ],
        ]);

        // Alternate row colors
        for ($row = $startRow; $row <= $endRow; $row++) {
            if ($row % 2 == 0) {
                $sheet->getStyle("A{$row}:{$sheet->getHighestColumn()}{$row}")->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->setStartColor(new Color('F2F2F2'));
            }
        }
    }

    // Write report header
    $semester_name = getSemesterName($conn, $selected_semester);
    $currentRow = 1;

    // Title
    $sheet->setCellValue("A{$currentRow}", 'TEACHER RATINGS PER SEMESTER REPORT');
    $sheet->mergeCells("A{$currentRow}:H{$currentRow}");
    $sheet->getStyle("A{$currentRow}")->getFont()->setBold(true)->setSize(16);
    $sheet->getStyle("A{$currentRow}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
    $currentRow++;

    // Report details
    $sheet->setCellValue("A{$currentRow}", 'Semester:');
    $sheet->setCellValue("B{$currentRow}", $semester_name);
    $sheet->setCellValue("C{$currentRow}", 'Generated:');
    $sheet->setCellValue("D{$currentRow}", date('Y-m-d H:i:s'));
    $sheet->setCellValue("E{$currentRow}", 'Generated By:');
    $sheet->setCellValue("F{$currentRow}", $_SESSION['username'] ?? 'System');
    $currentRow++;

    $sheet->setCellValue("A{$currentRow}", '');
    $currentRow++;

    // Summary Statistics
    $sheet->setCellValue("A{$currentRow}", 'SUMMARY STATISTICS');
    $sheet->mergeCells("A{$currentRow}:H{$currentRow}");
    $sheet->getStyle("A{$currentRow}")->getFont()->setBold(true)->setSize(14);
    $sheet->getStyle("A{$currentRow}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
    $currentRow++;

    // Summary headers
    $summary_headers = ['Metric', 'Value', 'Description', ''];
    $col = 'A';
    foreach ($summary_headers as $header) {
        $sheet->setCellValue("{$col}{$currentRow}", $header);
        $col++;
    }
    applyHeaderStyle($sheet, $currentRow, count($summary_headers));
    $currentRow++;

    // Total teachers evaluated
    $total_teachers_query = "SELECT COUNT(DISTINCT es.evaluatee_id) as total FROM evaluation_sessions es
                            WHERE es.evaluatee_type = 'teacher' AND es.status != 'draft'";
    if ($selected_semester > 0) {
        $total_teachers_query .= " AND es.semester_id = " . $selected_semester;
    }
    $total_teachers_result = mysqli_query($conn, $total_teachers_query);
    $total_teachers = mysqli_fetch_assoc($total_teachers_result)['total'];
    $sheet->setCellValue("A{$currentRow}", 'Total Teachers Evaluated');
    $sheet->setCellValue("B{$currentRow}", $total_teachers);
    $sheet->setCellValue("C{$currentRow}", 'Number of unique teachers evaluated');
    $currentRow++;

    // Total evaluators
    $total_evaluators_query = "SELECT COUNT(DISTINCT es.evaluator_id) as total FROM evaluation_sessions es
                              WHERE es.status != 'draft'";
    if ($selected_semester > 0) {
        $total_evaluators_query .= " AND es.semester_id = " . $selected_semester;
    }
    $total_evaluators_result = mysqli_query($conn, $total_evaluators_query);
    $total_evaluators = mysqli_fetch_assoc($total_evaluators_result)['total'];
    $sheet->setCellValue("A{$currentRow}", 'Total Evaluators');
    $sheet->setCellValue("B{$currentRow}", $total_evaluators);
    $sheet->setCellValue("C{$currentRow}", 'Total unique evaluators (students, teachers, heads)');
    $currentRow++;

    // Total subjects
    $total_subjects_query = "SELECT COUNT(DISTINCT es.subject_id) as total FROM evaluation_sessions es
                            WHERE es.subject_id IS NOT NULL AND es.status != 'draft'";
    if ($selected_semester > 0) {
        $total_subjects_query .= " AND es.semester_id = " . $selected_semester;
    }
    $total_subjects_result = mysqli_query($conn, $total_subjects_query);
    $total_subjects = mysqli_fetch_assoc($total_subjects_result)['total'];
    $sheet->setCellValue("A{$currentRow}", 'Total Subjects');
    $sheet->setCellValue("B{$currentRow}", $total_subjects);
    $sheet->setCellValue("C{$currentRow}", 'Total unique subjects evaluated');
    $currentRow++;

    // Average rating
    $avg_rating_query = "SELECT AVG(er.rating_value) as avg_rating FROM evaluation_responses er
                        INNER JOIN evaluation_sessions es ON er.evaluation_session_id = es.id
                        WHERE es.status != 'draft'";
    if ($selected_semester > 0) {
        $avg_rating_query .= " AND es.semester_id = " . $selected_semester;
    }
    $avg_rating_result = mysqli_query($conn, $avg_rating_query);
    $avg_rating = mysqli_fetch_assoc($avg_rating_result)['avg_rating'];
    $sheet->setCellValue("A{$currentRow}", 'Overall Average Rating');
    $sheet->setCellValue("B{$currentRow}", number_format($avg_rating, 2));
    $sheet->setCellValue("C{$currentRow}", 'Average rating across all evaluations');
    $currentRow++;

    applyDataStyle($sheet, $currentRow - 4, $currentRow - 1, 4);

    // Add spacing
    $currentRow += 2;

    // Teacher Ratings Summary
    $sheet->setCellValue("A{$currentRow}", 'TEACHER RATINGS SUMMARY');
    $sheet->mergeCells("A{$currentRow}:H{$currentRow}");
    $sheet->getStyle("A{$currentRow}")->getFont()->setBold(true)->setSize(14);
    $sheet->getStyle("A{$currentRow}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
    $currentRow++;

    // Teacher ratings headers
    $teacher_headers = ['Teacher Name', 'Average Rating', 'Total Evaluators', 'Student Evaluators', 'Teacher Evaluators', 'Head Evaluators', 'Total Subjects', 'Performance Level'];
    $col = 'A';
    foreach ($teacher_headers as $header) {
        $sheet->setCellValue("{$col}{$currentRow}", $header);
        $col++;
    }
    applyHeaderStyle($sheet, $currentRow, count($teacher_headers));
    $currentRow++;

    // Get comprehensive teacher ratings data
    $teacher_ratings_query = "
        SELECT
            CONCAT(COALESCE(f.first_name, u.first_name), ' ', COALESCE(f.last_name, u.last_name)) as teacher_name,
            AVG(er.rating_value) as avg_rating,
            COUNT(DISTINCT es.evaluator_id) as total_evaluators,
            COUNT(DISTINCT CASE WHEN es.evaluator_type = 'student' THEN es.evaluator_id END) as student_evaluators,
            COUNT(DISTINCT CASE WHEN es.evaluator_type = 'teacher' THEN es.evaluator_id END) as teacher_evaluators,
            COUNT(DISTINCT CASE WHEN es.evaluator_type = 'head' THEN es.evaluator_id END) as head_evaluators,
            (
                SELECT COUNT(DISTINCT tc.subject_id)
                FROM teacher_classes tc
                WHERE tc.teacher_id = es.evaluatee_id
                AND tc.status = 'active'
            ) as total_subjects,
            COUNT(DISTINCT es.id) as total_evaluations
        FROM evaluation_sessions es
        INNER JOIN evaluation_responses er ON es.id = er.evaluation_session_id
        LEFT JOIN faculty f ON es.evaluatee_id = f.id
        LEFT JOIN users u ON es.evaluatee_id = u.id
        WHERE es.evaluatee_type = 'teacher'
        AND es.status != 'draft'
        AND er.rating_value IS NOT NULL
    ";

    if ($selected_semester > 0) {
        $teacher_ratings_query .= " AND es.semester_id = " . $selected_semester;
    }

    $teacher_ratings_query .= " GROUP BY es.evaluatee_id, f.first_name, f.last_name, u.first_name, u.last_name
                               HAVING COUNT(er.id) >= 1
                               ORDER BY avg_rating DESC";

    $teacher_ratings_result = mysqli_query($conn, $teacher_ratings_query);
    $startRow = $currentRow;

    while ($teacher = mysqli_fetch_assoc($teacher_ratings_result)) {
        $sheet->setCellValue("A{$currentRow}", $teacher['teacher_name']);
        $sheet->setCellValue("B{$currentRow}", number_format($teacher['avg_rating'], 2));
        $sheet->setCellValue("C{$currentRow}", $teacher['total_evaluators']);
        $sheet->setCellValue("D{$currentRow}", $teacher['student_evaluators']);
        $sheet->setCellValue("E{$currentRow}", $teacher['teacher_evaluators']);
        $sheet->setCellValue("F{$currentRow}", $teacher['head_evaluators']);
        $sheet->setCellValue("G{$currentRow}", $teacher['total_subjects']);

        // Determine performance level with color coding
        $rating = $teacher['avg_rating'];
        if ($rating >= 4.5) {
            $performance = 'Excellent';
            $color = '00FF00'; // Green
        } elseif ($rating >= 4.0) {
            $performance = 'Very Satisfactory';
            $color = '90EE90'; // Light Green
        } elseif ($rating >= 3.5) {
            $performance = 'Satisfactory';
            $color = 'FFFF00'; // Yellow
        } elseif ($rating >= 3.0) {
            $performance = 'Fair';
            $color = 'FFA500'; // Orange
        } else {
            $performance = 'Needs Improvement';
            $color = 'FF0000'; // Red
        }

        $sheet->setCellValue("H{$currentRow}", $performance);
        $sheet->getStyle("H{$currentRow}")->getFill()
            ->setFillType(Fill::FILL_SOLID)
            ->setStartColor(new Color($color));

        $currentRow++;
    }

    applyDataStyle($sheet, $startRow, $currentRow - 1, count($teacher_headers));

    // Auto-size columns
    foreach (range('A', $sheet->getHighestColumn()) as $col) {
        $sheet->getColumnDimension($col)->setAutoSize(true);
    }

    // Clear any output buffer
    ob_end_clean();

    // Set headers for Excel download
    $filename = "Teacher_Ratings_Report_" . ($selected_semester > 0 ? $semester_name : 'All_Semesters') . "_" . date('Y-m-d_H-i-s') . ".xlsx";
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    header('Cache-Control: max-age=0');
    header('Cache-Control: max-age=1');
    header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
    header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
    header('Cache-Control: cache, must-revalidate');
    header('Pragma: public');

    // Create Excel writer and output
    $writer = new Xlsx($spreadsheet);
    $writer->save('php://output');
    exit;

} catch (Exception $e) {
    // Clear any output buffer
    ob_end_clean();

    // If there's an error, output it as text
    header('Content-Type: text/plain');
    echo "Error: " . $e->getMessage();
    echo "\nFile: " . $e->getFile();
    echo "\nLine: " . $e->getLine();
}
?>