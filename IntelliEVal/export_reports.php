<?php
session_start();
require_once '../config/database.php';
require_once '../includes/functions.php';
require_once 'clustering_analysis.php';

// Check if user is logged in and has guidance_officer role
if (!isset($_SESSION['user_id']) || $_SESSION['role'] !== 'guidance_officer') {
    header('Location: ../login.php');
    exit();
}

// Get parameters
$export_type = isset($_GET['type']) ? $_GET['type'] : 'overview';
$selected_semester = isset($_GET['semester']) ? (int)$_GET['semester'] : 0;
$selected_year = isset($_GET['year']) ? $_GET['year'] : date('Y');

// Set headers for CSV download
$filename = "IntelliEVal_Report_" . ucfirst($export_type) . "_" . date('Y-m-d_H-i-s') . ".csv";
header('Content-Type: text/csv');
header('Content-Disposition: attachment; filename="' . $filename . '"');
header('Pragma: no-cache');
header('Expires: 0');

// Create output stream
$output = fopen('php://output', 'w');

// Function to write CSV row
function writeCSVRow($handle, $data) {
    fputcsv($handle, $data);
}

// Function to get semester name
function getSemesterName($conn, $semester_id) {
    if ($semester_id > 0) {
        $query = "SELECT name, academic_year FROM semesters WHERE id = ?";
        $stmt = mysqli_prepare($conn, $query);
        mysqli_stmt_bind_param($stmt, "i", $semester_id);
        mysqli_stmt_execute($stmt);
        $result = mysqli_stmt_get_result($stmt);
        $semester = mysqli_fetch_assoc($result);
        return $semester ? $semester['name'] . ' (' . $semester['academic_year'] . ')' : 'All Semesters';
    }
    return 'All Semesters';
}

// Write report header
$semester_name = getSemesterName($conn, $selected_semester);
writeCSVRow($output, ['IntelliEVal Report']);
writeCSVRow($output, ['Report Type:', ucfirst($export_type)]);
writeCSVRow($output, ['Semester:', $semester_name]);
writeCSVRow($output, ['Generated:', date('Y-m-d H:i:s')]);
writeCSVRow($output, ['Generated By:', $_SESSION['username'] ?? 'System']);
writeCSVRow($output, []);

switch ($export_type) {
    case 'overview':
        exportOverviewReport($conn, $output, $selected_semester);
        break;
    case 'clustering':
        exportClusteringReport($conn, $output, $selected_semester);
        break;
    case 'performance':
        exportPerformanceReport($conn, $output, $selected_semester);
        break;
    case 'training':
        exportTrainingReport($conn, $output, $selected_semester);
        break;
    default:
        writeCSVRow($output, ['Error: Invalid report type']);
}

fclose($output);

function exportOverviewReport($conn, $output, $semester_id) {
    // Key Statistics
    writeCSVRow($output, ['OVERVIEW STATISTICS']);
    writeCSVRow($output, ['Metric', 'Value', 'Description']);

    // Total evaluations
    $total_evaluations_query = "SELECT COUNT(*) as total FROM evaluation_sessions es";
    if ($semester_id > 0) {
        $total_evaluations_query .= " WHERE es.semester_id = " . $semester_id;
    }
    $total_evaluations_result = mysqli_query($conn, $total_evaluations_query);
    $total_evaluations = mysqli_fetch_assoc($total_evaluations_result)['total'];
    writeCSVRow($output, ['Total Evaluations', $total_evaluations, 'Total completed evaluation sessions']);

    // Total teachers
    $total_teachers_query = "SELECT COUNT(DISTINCT es.evaluatee_id) as total FROM evaluation_sessions es
                            WHERE es.evaluatee_type = 'teacher'";
    if ($semester_id > 0) {
        $total_teachers_query .= " AND es.semester_id = " . $semester_id;
    }
    $total_teachers_result = mysqli_query($conn, $total_teachers_query);
    $total_teachers = mysqli_fetch_assoc($total_teachers_result)['total'];
    writeCSVRow($output, ['Teachers Evaluated', $total_teachers, 'Total unique teachers evaluated']);

    // Total students
    $total_students_query = "SELECT COUNT(DISTINCT es.evaluator_id) as total FROM evaluation_sessions es
                            WHERE es.evaluator_type = 'student'";
    if ($semester_id > 0) {
        $total_students_query .= " AND es.semester_id = " . $semester_id;
    }
    $total_students_result = mysqli_query($conn, $total_students_query);
    $total_students = mysqli_fetch_assoc($total_students_result)['total'];
    writeCSVRow($output, ['Students Participated', $total_students, 'Total unique students who participated']);

    // Average rating
    $avg_rating_query = "SELECT AVG(er.rating_value) as avg_rating FROM evaluation_responses er
                         INNER JOIN evaluation_sessions es ON er.evaluation_session_id = es.id
                         WHERE er.rating_value IS NOT NULL";
    if ($semester_id > 0) {
        $avg_rating_query .= " AND es.semester_id = " . $semester_id;
    }
    $avg_rating_result = mysqli_query($conn, $avg_rating_query);
    $avg_rating = mysqli_fetch_assoc($avg_rating_result)['avg_rating'];
    writeCSVRow($output, ['Average Rating', number_format($avg_rating, 2), 'Overall average rating across all evaluations']);

    writeCSVRow($output, []);

    // Top performing teachers
    writeCSVRow($output, ['TOP PERFORMING TEACHERS']);
    writeCSVRow($output, ['Rank', 'Teacher Name', 'Average Rating', 'Total Responses', 'Performance Level']);

    $top_teachers_query = "SELECT
        es.evaluatee_id,
        CONCAT(COALESCE(f.first_name, u.first_name), ' ', COALESCE(f.last_name, u.last_name)) as teacher_name,
        AVG(er.rating_value) as avg_rating,
        COUNT(er.id) as total_responses
    FROM evaluation_sessions es
    INNER JOIN evaluation_responses er ON es.id = er.evaluation_session_id
    LEFT JOIN faculty f ON es.evaluatee_id = f.id
    LEFT JOIN users u ON es.evaluatee_id = u.id
    WHERE es.evaluatee_type = 'teacher' AND er.rating_value IS NOT NULL";

    if ($semester_id > 0) {
        $top_teachers_query .= " AND es.semester_id = " . $semester_id;
    }

    $top_teachers_query .= " GROUP BY es.evaluatee_id, f.first_name, f.last_name, u.first_name, u.last_name
                            HAVING COUNT(er.id) >= 5
                            ORDER BY avg_rating DESC
                            LIMIT 10";

    $top_teachers_result = mysqli_query($conn, $top_teachers_query);
    $rank = 1;
    while ($teacher = mysqli_fetch_assoc($top_teachers_result)) {
        $performance_text = $teacher['avg_rating'] >= 4.5 ? 'Excellent' :
                          ($teacher['avg_rating'] >= 4.0 ? 'Good' :
                          ($teacher['avg_rating'] >= 3.5 ? 'Satisfactory' : 'Needs Improvement'));
        writeCSVRow($output, [
            $rank,
            $teacher['teacher_name'] ?? 'Unknown Teacher',
            number_format($teacher['avg_rating'], 2),
            $teacher['total_responses'],
            $performance_text
        ]);
        $rank++;
    }
}

function exportClusteringReport($conn, $output, $semester_id) {
    // Initialize clustering analysis
    $clustering = new ClusteringAnalysis($conn);

    writeCSVRow($output, ['CLUSTERING ANALYSIS REPORT']);
    writeCSVRow($output, ['Analysis Type', 'Cluster ID', 'Label', 'Size', 'Average Rating', 'Description']);

    // Teacher Performance Clusters
    $teacher_clusters = $clustering->clusterTeacherPerformance($semester_id, 3);
    if (!isset($teacher_clusters['error'])) {
        $teacher_insights = $clustering->getClusteringInsights($teacher_clusters, 'teacher');
        foreach ($teacher_insights as $cluster_id => $insight) {
            writeCSVRow($output, [
                'Teacher Performance',
                $cluster_id,
                $insight['label'],
                $insight['size'],
                number_format($insight['avg_rating'], 2),
                $insight['description']
            ]);
        }
    }

    // Evaluation Pattern Clusters
    $pattern_clusters = $clustering->clusterEvaluationPatterns($semester_id, 4);
    if (!isset($pattern_clusters['error'])) {
        $pattern_insights = $clustering->getClusteringInsights($pattern_clusters, 'pattern');
        foreach ($pattern_insights as $cluster_id => $insight) {
            writeCSVRow($output, [
                'Evaluation Patterns',
                $cluster_id,
                $insight['label'],
                $insight['size'],
                number_format($insight['avg_rating'], 2),
                $insight['description']
            ]);
        }
    }

    // Department Performance Clusters
    $department_clusters = $clustering->clusterDepartmentPerformance($semester_id, 3);
    if (!isset($department_clusters['error'])) {
        $department_insights = $clustering->getClusteringInsights($department_clusters, 'department');
        foreach ($department_insights as $cluster_id => $insight) {
            writeCSVRow($output, [
                'Department Performance',
                $cluster_id,
                $insight['label'],
                $insight['size'],
                number_format($insight['avg_rating'], 2),
                $insight['description']
            ]);
        }
    }

    writeCSVRow($output, []);
    writeCSVRow($output, ['CLUSTERING ALGORITHM DETAILS']);
    writeCSVRow($output, ['Algorithm', 'K-means Clustering']);
    writeCSVRow($output, ['Distance Metric', 'Euclidean Distance']);
    writeCSVRow($output, ['Initialization', 'Random Centroids']);
    writeCSVRow($output, ['Max Iterations', '100']);
    writeCSVRow($output, ['Data Source', 'Real Database Data']);
}

function exportPerformanceReport($conn, $output, $semester_id) {
    writeCSVRow($output, ['PERFORMANCE METRICS REPORT']);

    // Rating Distribution
    writeCSVRow($output, ['RATING DISTRIBUTION']);
    writeCSVRow($output, ['Rating', 'Label', 'Count', 'Percentage']);

    $rating_distribution_query = "SELECT
        er.rating_value,
        COUNT(*) as count,
        (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM evaluation_responses WHERE rating_value IS NOT NULL)) as percentage
    FROM evaluation_responses er
    INNER JOIN evaluation_sessions es ON er.evaluation_session_id = es.id
    WHERE er.rating_value IS NOT NULL";

    if ($semester_id > 0) {
        $rating_distribution_query .= " AND es.semester_id = " . $semester_id;
    }

    $rating_distribution_query .= " GROUP BY er.rating_value ORDER BY er.rating_value DESC";
    $rating_distribution_result = mysqli_query($conn, $rating_distribution_query);

    $rating_labels = [5 => 'Excellent', 4 => 'Very Satisfactory', 3 => 'Satisfactory', 2 => 'Good', 1 => 'Poor'];
    while ($row = mysqli_fetch_assoc($rating_distribution_result)) {
        writeCSVRow($output, [
            $row['rating_value'],
            $rating_labels[$row['rating_value']] ?? 'Unknown',
            $row['count'],
            number_format($row['percentage'], 2) . '%'
        ]);
    }

    writeCSVRow($output, []);

    // Detailed Teacher Performance
    writeCSVRow($output, ['DETAILED TEACHER PERFORMANCE']);
    writeCSVRow($output, ['Teacher Name', 'Average Rating', 'Total Responses', 'Excellent %', 'Very Satisfactory %', 'Satisfactory %', 'Good %', 'Poor %', 'Performance Level']);

    $detailed_teachers_query = "SELECT
        es.evaluatee_id,
        CONCAT(COALESCE(f.first_name, u.first_name), ' ', COALESCE(f.last_name, u.last_name)) as teacher_name,
        AVG(er.rating_value) as avg_rating,
        COUNT(er.id) as total_responses,
        COUNT(CASE WHEN er.rating_value = 5 THEN 1 END) as excellent_count,
        COUNT(CASE WHEN er.rating_value = 4 THEN 1 END) as very_satisfactory_count,
        COUNT(CASE WHEN er.rating_value = 3 THEN 1 END) as satisfactory_count,
        COUNT(CASE WHEN er.rating_value = 2 THEN 1 END) as good_count,
        COUNT(CASE WHEN er.rating_value = 1 THEN 1 END) as poor_count
    FROM evaluation_sessions es
    INNER JOIN evaluation_responses er ON es.id = er.evaluation_session_id
    LEFT JOIN faculty f ON es.evaluatee_id = f.id
    LEFT JOIN users u ON es.evaluatee_id = u.id
    WHERE es.evaluatee_type = 'teacher' AND er.rating_value IS NOT NULL";

    if ($semester_id > 0) {
        $detailed_teachers_query .= " AND es.semester_id = " . $semester_id;
    }

    $detailed_teachers_query .= " GROUP BY es.evaluatee_id, f.first_name, f.last_name, u.first_name, u.last_name
                                 HAVING COUNT(er.id) >= 5
                                 ORDER BY avg_rating DESC";

    $detailed_teachers_result = mysqli_query($conn, $detailed_teachers_query);
    while ($teacher = mysqli_fetch_assoc($detailed_teachers_result)) {
        $excellent_pct = ($teacher['excellent_count'] / $teacher['total_responses']) * 100;
        $very_satisfactory_pct = ($teacher['very_satisfactory_count'] / $teacher['total_responses']) * 100;
        $satisfactory_pct = ($teacher['satisfactory_count'] / $teacher['total_responses']) * 100;
        $good_pct = ($teacher['good_count'] / $teacher['total_responses']) * 100;
        $poor_pct = ($teacher['poor_count'] / $teacher['total_responses']) * 100;

        $performance_text = $teacher['avg_rating'] >= 4.5 ? 'Excellent' :
                          ($teacher['avg_rating'] >= 4.0 ? 'Good' :
                          ($teacher['avg_rating'] >= 3.5 ? 'Satisfactory' : 'Needs Improvement'));

        writeCSVRow($output, [
            $teacher['teacher_name'] ?? 'Unknown Teacher',
            number_format($teacher['avg_rating'], 2),
            $teacher['total_responses'],
            number_format($excellent_pct, 1) . '%',
            number_format($very_satisfactory_pct, 1) . '%',
            number_format($satisfactory_pct, 1) . '%',
            number_format($good_pct, 1) . '%',
            number_format($poor_pct, 1) . '%',
            $performance_text
        ]);
    }
}

function exportTrainingReport($conn, $output, $semester_id) {
    writeCSVRow($output, ['TRAINING NEEDS ANALYSIS REPORT']);

    // Training Needs Summary
    writeCSVRow($output, ['TRAINING NEEDS SUMMARY']);
    writeCSVRow($output, ['Category', 'Subcategory', 'Average Rating', 'Total Responses', 'Low Ratings', 'Improvement Needed %', 'Priority Level', 'Recommendations']);

    $training_needs_query = "SELECT
        esc.name as subcategory_name,
        mec.name as category_name,
        AVG(er.rating_value) as avg_rating,
        COUNT(er.id) as total_responses,
        COUNT(CASE WHEN er.rating_value <= 3 THEN 1 END) as low_ratings
    FROM evaluation_responses er
    JOIN evaluation_sessions es ON er.evaluation_session_id = es.id
    JOIN evaluation_questionnaires eq ON er.questionnaire_id = eq.id
    JOIN evaluation_sub_categories esc ON eq.sub_category_id = esc.id
    JOIN main_evaluation_categories mec ON esc.main_category_id = mec.id
    WHERE es.status = 'completed' AND er.rating_value IS NOT NULL";

    if ($semester_id > 0) {
        $training_needs_query .= " AND es.semester_id = " . $semester_id;
    }

    $training_needs_query .= " GROUP BY esc.id, esc.name, mec.name
                              HAVING COUNT(er.id) >= 5
                              ORDER BY (COUNT(CASE WHEN er.rating_value <= 3 THEN 1 END) / COUNT(er.id)) DESC, avg_rating ASC";

    $training_needs_result = mysqli_query($conn, $training_needs_query);
    while ($need = mysqli_fetch_assoc($training_needs_result)) {
        $improvement_needed_pct = ($need['low_ratings'] / $need['total_responses']) * 100;
        $priority_level = $need['avg_rating'] < 3.5 ? 'Critical' :
                         ($need['avg_rating'] < 4.0 ? 'High' : 'Medium');

        $recommendations = '';
        if ($need['avg_rating'] < 3.5) {
            $recommendations = 'Immediate intervention required; Schedule intensive training sessions; Implement peer mentoring';
        } elseif ($need['avg_rating'] < 4.0) {
            $recommendations = 'Targeted professional development workshops; Regular performance monitoring';
        } else {
            $recommendations = 'Maintain current performance; Occasional refresher training';
        }

        writeCSVRow($output, [
            $need['category_name'],
            $need['subcategory_name'],
            number_format($need['avg_rating'], 2),
            $need['total_responses'],
            $need['low_ratings'],
            number_format($improvement_needed_pct, 1) . '%',
            $priority_level,
            $recommendations
        ]);
    }

    writeCSVRow($output, []);
    writeCSVRow($output, ['TRAINING RECOMMENDATIONS']);
    writeCSVRow($output, ['Priority Level', 'Action Items', 'Timeline', 'Expected Impact']);
    writeCSVRow($output, ['Critical', 'Immediate intervention; Intensive training; Peer mentoring', 'Week 1-2', '15-25% improvement in 3-6 months']);
    writeCSVRow($output, ['High', 'Targeted workshops; Performance monitoring; Feedback sessions', 'Week 3-8', '10-20% improvement in 3-6 months']);
    writeCSVRow($output, ['Medium', 'Refresher training; Best practices sharing; Recognition programs', 'Month 3-6', '5-15% improvement in 3-6 months']);
}
?>